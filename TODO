TODO for gaia-ng
~~~~~~~~~~~~~~~~
Gaia, second try:
  Now after some time passed and many things happened, I still have
  some ideas regarding gaia. As it's not that useful with (relatively)
  low quality NASA maps, project goal should be to become portable
  multi-purpose mapping tool. That is, as many map formats as possible,
  with extended GPS and related things support. For now, focus should
  be changed from user-visible changes and new features to changing gaia
  architecture for easiest extension.

  Those are not strictly TODO items, but just random ideas that should
  give you an idea of new gaia:

Layers will be core of gaia-ng and represent all it's functionality.

Each layer sources resides in it's own directory, and compiles to
separate .so library. Thus, layers are pluggable. Yes, 3rd-party
layers are possible. Yes, closed-source too.

There should be libgaia which provide layers interface they may use.
That is:
* OpenGL (layer's main task is to render tiles)
* Config

Layer stores all persistent settings in config file. Sysctl-like
structure is sufficent, but xml should also be considered. The main
problem here is possibly great amount of value types we'll need to
support. In addition to standart string/value/bool/float we'll
probably need: lan/lon in many formats, colors (more?). Need to
check out existing configuration libs.

layers.0.type = grid
layers.0.name = Grid
layers.0.enabled = 1
layers.0.latitude.step = 30
layers.0.latitude.showdegrees = 1
layers.0.longitude.step = 30
layers.0.longitude.showdegrees = 0
layers.1.type = gps
layers.1.name = GPS #1
layers.1.enabled = 1
layers.1.sources.0.name = My car
layers.1.sources.0.type = gpsd
layers.1.sources.0.host = mygps.somewhere.com
layers.1.sources.0.color = #FF0000
layers.1.sources.0.update = 100
...


* Gaia uses Qt, but I still want to make it optional, as
  * I've promised it
  * It'll be interesting
  * It'll possibly make gaia more portable. Not sure, but are there
    mobile platforms for which there's no Qt/Qt is too large, but with
    software OpenGL available?

Yes, making Qt dialogs optional in layers will be quite hard - seems
like some heavy macro magic will be required to make layer sources
optionally use Qt.  Still I think it can be done gracefully.

Finally, layers will need interface to draw icons/text/hud.

And I want to change tile renderer so it's not limited with
axis-oriented rectangles (I have a little idea how to do this
transparently). Actually, this is needed to special EarthView
mode I want to implement very much.

Some layers will only be allowed once (worldwind layer), but others
will be allowed multiple times (gps layer) for user convenience.


Well, that's it for now. Ultimate TODO list will look like this:
* Reimplement layer architecture
  * Restructure directory tree (programs/gaia -> src/,
    programs/others -> util/, gaia layers -> layers/)
  * Create simple libgaia which provides layer interface
  * Create test layer working with libgaia, disable all other
    layers for now
  * Add config class with configfile reading/writing and easy
    access to tree-like structure. Implement basic types handling
    (int/string/bool)
    * Should gracefully process structure changes (automatically
      add newly added keys to config)
    * Should leave comments
    * Should strip default values from config (or comment them out)
    * Should be able to modify config from commandline to some extent
      (but I guess such changes should not be saved). I.e.
      gaia --enable-layer=GPS --gps-enable-all-sources
  * Review/refactor some support structures
    * Threadsafe log with mutexes
    * Timer
  * Reimplement tile rendering routine to allow non-rectangular
    tiles
  * Create ExampleLayer. This will server as both example/template
    for new layer creators and as unittest for all layer interfaces.
  * Implement Qt dialogs in ExampleLayer
    * Implement sidebar dialog
    * Implement standalone dialog
    * Make all those interact with config class
    * Make all this Qt-related stuff conditionally compiled
  * Implement services for icon/text/hud drawing
    * As far as I remember icon stuff is already present to some
      extent
    * Add text handling. Freetype? Xft? sdl_ttf?
* Next, adapt existing layers to new order 
  * WorldWind
  * Grid
* Next, see old TODO below
  * Possibly it'll be good to release something at this moment, or
    should other features be added before?

Random stuff:
* Use forward declarations for faster compilation

Old TODO
~~~~~~~~
Graphics/user interface:
* Full 3D earth renderer (partially done)
* HUD to display text labels and icons (partially done)
  * Text label support
    * Bar with current geographical coordinates and statistics
    * Freetype font renderer (will also allow internationalization
      of HUD)
* Ability to set initial viewer's coordinates, possibly with location
  catalogue (patch by Andreas Grau available)
* gaia-mkmap utility; tell it corner coordinates, dimensions, dpi, and
  it'll make you map in single JPEG, ready for printing or whatever.
  (should be also available from gaia itself). XXX: wtf is geotiffs?
* Implement non-realtime OpenGL rendering. Thus, even software
  emulation will be usable. You navigate with only hollow grid
  visible, then you stop navigating and the view is rendered in 3D.
  Anyone can tell me, is software OpenGL available in Windows Mobile
  devices?
* Re-implement Qt'less client

Caching:
* Implement tile cache. It'll be compatible with NASA layer, but
  generally multi-purpose (Andreas Grau is working on it)
* Add utility to control it (read and write dumps, read and write
  separate files, delete areas etc.) (Andreas Grau is working on it)

Additional layers:
* http://openaerialmap.org - that should be useful
* GPS: Render path in lines, instead of HUD dots
* GPS: Path optimizer (convert strait line of points to 2 points)
* GPS: Interface to add muliple GPS entities from command line
* GPS: Auto reconnect to gpsd if connection is lost
* GPS: Direction indicator for easy finding marker that's not in view
  currently.
* GPS: Ability to follow GPS marker
* Grid: correct grid rendering
  * Render degrees for grid lines (via HUD)
* Anyone with any good layer ideas? Mail me (working layers are most
  welcome, of course:)
  * My ideas so far: SunlightLayer, TimezoneLayer,
    SatelliteCoverageLayer
* Layer to place and display any number of custom image files on
  the map. Will add support for these:
  http://www.archive.org/details/maps_usgs
  Most probably, that'll be available only ofter GUI is done, it's
  to clumsy to control from command line.
* Country borders (patch avilable)
* Layers based on WorldWind addons (warning! what license are these
  under?): http://www.dynagis.net/wwdownload/free_addons.html, patches
  for some by Andreas Grau are available)
* There's free aerial imagery of whole Slovenia (where? license?)
* More sources:
  * http://www.ssec.wisc.edu/data/ (what's license for those?)
  * http://www.fourmilab.ch/cgi-bin/Earth
  * http://aa.usno.navy.mil/data/docs/earthview.html

Other:
* Windows port

Random ideas and suggestions (for far future):
* GIS support (grass.itc.it, qgis.org), export geotiffs (what's that?)
* www.ecogeographica.com support (didn't looked there yet)
* Add list of contributors

Known bugs:
* Tile may be loaded twice (layer refactoring)
* Tiles are sometimes stuck unloaded (layer refactoring)
* Timer is not threadsafe
* On MacOSX, when exiting, stucks on pthread_join in
  SimpleTileStorage::~SimpleTileStorage (I suppose it will stuck on
  any pthread_join, as thread handling is the same everywhere in gaia).
* NMEA doesn't work with USB devices on Linux (putc to a clist with no
  reserved cblocks). Also need to setup tty before work (like line
  speed etc.)
